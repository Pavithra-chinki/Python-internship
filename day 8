#1. python error types

#IndexError is thrown when trying to access an item at an invalid index.
>>> L1=[1,2,3]
>>> L1[3]
Traceback (most recent call last):
File "<pyshell#18>", line 1, in <module>
L1[3]
IndexError: list index out of range

#ModuleNotFoundError is thrown when a module could not be found.
>>> import notamodule
Traceback (most recent call last):
File "<pyshell#10>", line 1, in <module>
import notamodule
ModuleNotFoundError: No module named 'notamodule'

#TypeError is thrown when an operation or function is applied to an object of an inappropriate type.
>>> '2'+2
Traceback (most recent call last):
File "<pyshell#23>", line 1, in <module>
'2'+2
TypeError: must be str, not int

#ValueError is thrown when a function's argument is of an inappropriate type.
>>> int('xyz')
Traceback (most recent call last):
File "<pyshell#14>", line 1, in <module>
int('xyz')
ValueError: invalid literal for int() with base 10: 'xyz'

#ZeroDivisionError is thrown when the second operator in the division is zero.
>>> x=100/0
Traceback (most recent call last):
File "<pyshell#8>", line 1, in <module>
x=100/0
ZeroDivisionError: division by zero

#IOError Exception
import sys
def whatever():
try:
f = open ( "foo.txt", 'r' )
except IOError, e:
print e
print sys.exc_type
whatever()
o/p:
[Errno 2] No such file or directory: 'foo.txt'
<type 'exceptions.IOError'>

#KeyboardInterrupt is thrown when the user hits the interrupt key (normally Control-C) during the execution of the program.
>>> name=input('enter your name')
enter your name^c
Traceback (most recent call last):
File "<pyshell#9>", line 1, in <module>
name=input('enter your name')
KeyboardInterrupt

#ImportError is thrown when a specified function can not be found.
>>> from math import cube
Traceback (most recent call last):
File "<pyshell#16>", line 1, in <module>
from math import cube
ImportError: cannot import name 'cube'



#2. simple calc. with try and except for all use cases
try:
    print("Simple Calculator")
    print("1.Add")
    print("2.Substract")
    print("3.Multiply")
    print("4.Divide")
    num=int(input("Enter Choice(1-4): "))
    if num==1:
        a=int(input("Enter A:"))
        b=int(input("Enter B:"))
        c=a+b
        print("Sum = ",c)
    elif num==2:
        a=int(input("Enter A:"))
        b=int(input("Enter B:"))
        c=b-a
        print("Difference = ",c)
    elif  num==3:
        a=int(input("Enter A:"))
        b=int(input("Enter B:"))
        c=a*b
        print("Product = ",c)
    elif num==4:
        a=int(input("Enter A:"))
        b=int(input("Enter B:"))
        c=a/b
        print("Quotient = ",c)
    else:
        print("Invalid Choice")

except ZeroDivisionError:
    print("Can't divide by 0.  Please try again.")
except AttributeError:
    print('Please check usage method and try again.')
except TypeError:
    print("please enter inputs of correct datatype ")
except NameError:
    print("Invalid input")
except Exception:
    print("Wrong operator")


#3. try block raises a nameerror and another for other errors
try:
  print(add)
except NameError:
  print("add is not defined")
except:
  print("Something went wrong")
  
  
#4. when try-except senario is not required?
Exceptions should be used to signal serious errors from which your method is unable or unwilling to recover. 
In a best case scenario, no exceptions should occur during the whole application flow.
Exceptions are not needed to signal something completely normal. 
We donâ€™t use exceptions to control your normal application flow. Use return values or state fields for flow control instead.
A program or application where no exceptions has a chance to occur, there try-except is not required. 
  

#5. input inside try catch block
while True:
    try:
        n = input("Please enter an integer: ")
        n = int(n)
        break
    except ValueError:
        print("No valid integer! Please try again ...")
print("Great, you successfully entered an integer!")
